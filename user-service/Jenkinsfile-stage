pipeline {
    agent any
    tools {
        jdk 'openjdk_11'
    }
    environment {
        SERVICE_NAME = 'user-service'
        DOCKER_IMAGE = "ecommerce/${SERVICE_NAME}"
        K8S_NAMESPACE = 'stage'
        STAGE_TAG = "stage-${BUILD_NUMBER}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm // Descarga el código fuente
            }
        }
        stage('Build') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh './mvnw clean compile -DskipTests' // Compila sin ejecutar tests aun
                }
            }
        }
        stage('Unit Tests') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh './mvnw test' // Ejecuta pruebas unitarias
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Package') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh './mvnw package -DskipTests' // Empaqueta el JAR
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${STAGE_TAG} . // Construye imagen con tag de build
                        docker tag ${DOCKER_IMAGE}:${STAGE_TAG} ${DOCKER_IMAGE}:stage-latest
                    """
                }
            }
        }
        stage('Deploy to Kubernetes Stage') {
            steps {
                dir(env.SERVICE_NAME) {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        sh """
                            kubectl apply -f k8s/deployment-stage.yaml --validate=false
                            kubectl apply -f k8s/service-stage.yaml --validate=false
                            kubectl rollout status deployment/${SERVICE_NAME} -n ${K8S_NAMESPACE} --timeout=5m
                        """
                    }
                }
            }
        }
        stage('Integration Tests in Stage') {
            steps {
                dir(env.SERVICE_NAME) {
                    script {
                        def nodePort = sh(
                            script: """kubectl get svc ${SERVICE_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'""",
                            returnStdout: true
                        ).trim() // Extrae el NodePort asignado por Kubernetes
                        sh """
                            export TEST_HOST=http://localhost:${nodePort}
                            ./mvnw verify -Dtest=*IntegrationTest // Pruebas de integración apuntando al despliegue
                        """
                    }
                }
            }
        }
        stage('Smoke Tests') {
            steps {
                dir(env.SERVICE_NAME) {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        script {
                            def nodePort = sh(
                                script: """kubectl get svc ${SERVICE_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'""",
                                returnStdout: true
                            ).trim()
                            sh """
                                curl -f http://localhost:${nodePort}/actuator/health // Verifica health endpoint
                                curl -f http://localhost:${nodePort}/user-service/api/users // Verifica endpoint principal
                            """
                        }
                    }
                }
            }
        }
        stage('Archive Artifacts') {
            steps {
                dir(env.SERVICE_NAME) {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true, allowEmptyArchive: false
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline STAGE ejecutado exitosamente'
        }
        failure {
            echo 'Pipeline STAGE falló'
        }
        always {
            echo '=== Limpieza ===' // Aquí podría agregarse limpieza de imágenes, si se requiere
        }
    }
}
