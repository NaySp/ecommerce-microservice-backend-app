pipeline {
    agent any
    tools {
        jdk 'openjdk_11'
    }
    environment {
        SERVICE_NAME = 'order-service'
        DOCKER_IMAGE = "ecommerce/${SERVICE_NAME}"
        K8S_NAMESPACE = 'stage'
        STAGE_TAG = "stage-${BUILD_NUMBER}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build & Test') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh './mvnw clean compile'
                    sh './mvnw test'
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Package') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh './mvnw package -DskipTests'
                }
            }
        }
        stage('Build & Push Docker Image') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${STAGE_TAG} .
                        docker tag ${DOCKER_IMAGE}:${STAGE_TAG} ${DOCKER_IMAGE}:stage-latest
                    """
                }
            }
        }
        stage('Deploy to K8s Stage') {
            steps {
                dir(env.SERVICE_NAME) {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        sh """
                            kubectl apply -f k8s/deployment-stage.yaml
                            kubectl apply -f k8s/service-stage.yaml
                            kubectl rollout status deployment/${SERVICE_NAME} -n ${K8S_NAMESPACE} --timeout=5m
                        """
                    }
                }
            }
        }
        stage('Integration Tests') {
            steps {
                dir(env.SERVICE_NAME) {
                    script {
                        def nodePort = sh(
                            script: "kubectl get svc ${SERVICE_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'",
                            returnStdout: true
                        ).trim()
                        sh "export TEST_HOST=http://localhost:${nodePort} && ./mvnw verify -Dtest=*IntegrationTest"
                    }
                }
            }
        }
        stage('Smoke Tests') {
            steps {
                dir(env.SERVICE_NAME) {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        script {
                            def nodePort = sh(
                                script: "kubectl get svc ${SERVICE_NAME} -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'",
                                returnStdout: true
                            ).trim()
                            sh "curl -f http://localhost:${nodePort}/actuator/health"
                            sh "curl -f http://localhost:${nodePort}/order-service/api/orders"
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Order Service desplegado correctamente en stage.'
        }
        failure {
            echo 'Pipeline de Order Service (stage) fall√≥.'
        }
        always {
            echo 'Limpieza finalizada.'
        }
    }
}
