pipeline {
    agent any
    
    tools {
        jdk 'openjdk_11'
    }
    
    environment {
        SERVICE_NAME = 'favourite-service'
        DOCKER_IMAGE = "ecommerce/${SERVICE_NAME}"
        DOCKER_TAG = "dev-${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîç Checking out ${SERVICE_NAME}..."
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo "üî® Building ${SERVICE_NAME}..."
                dir(SERVICE_NAME) {
                    sh './mvnw clean compile -DskipTests'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo "üß™ Running unit tests for ${SERVICE_NAME}..."
                dir(SERVICE_NAME) {
                    sh './mvnw test'
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: "${SERVICE_NAME}/target/surefire-reports/*.xml"
                }
            }
        }
        
        stage('Package') {
            steps {
                echo "üì¶ Packaging ${SERVICE_NAME}..."
                dir(SERVICE_NAME) {
                    sh './mvnw package -DskipTests'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image for ${SERVICE_NAME}..."
                dir(SERVICE_NAME) {
                    script {
                        docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    }
                }
            }
        }
        
        stage('Tag Image') {
            steps {
                echo "üè∑Ô∏è Tagging image as dev-latest..."
                script {
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:dev-latest"
                }
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                echo "üìÇ Archiving artifacts..."
                archiveArtifacts artifacts: "${SERVICE_NAME}/target/*.jar", fingerprint: true
            }
        }
    }
    
    post {
        success {
            echo "‚úÖ ${SERVICE_NAME} build #${BUILD_NUMBER} successful!"
            echo "üì¶ Image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
        failure {
            echo "‚ùå ${SERVICE_NAME} build #${BUILD_NUMBER} failed!"
        }
        always {
            echo "üßπ Cleaning workspace..."
            cleanWs()
        }
    }
}
