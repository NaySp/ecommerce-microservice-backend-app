pipeline {
    agent any
    tools {
        jdk 'openjdk_11'
    }
    environment {
        SERVICE_NAME = 'cloud-config'
        DOCKER_IMAGE = "ecommerce/${SERVICE_NAME}"
        K8S_NAMESPACE = 'stage'
        STAGE_TAG = "stage-${BUILD_NUMBER}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build & Test') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh './mvnw clean compile'
                    sh './mvnw test'
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Package') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh './mvnw clean package -DskipTests'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                dir(env.SERVICE_NAME) {
                    sh """
                        docker version
                        docker build -t ${DOCKER_IMAGE}:stage-latest .
                        docker save ${DOCKER_IMAGE}:stage-latest | docker exec -i minikube docker load
                    """
                }
            }
        }
        stage('Deploy to K8s Stage') {
            steps {
                dir(env.SERVICE_NAME) {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        sh """
                            kubectl apply -f k8s/deployment-stage.yaml --validate=false
                            kubectl rollout status deployment/cloud-config -n stage --timeout=10m
                        """
                    }
                }
            }
        }
        stage('Verify Deployment') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh """
                        echo 'Verificando deployment en namespace ${K8S_NAMESPACE}...'
                        kubectl get pods -n ${K8S_NAMESPACE} -l app=${SERVICE_NAME}
                        kubectl get svc -n ${K8S_NAMESPACE} -l app=${SERVICE_NAME}
                    """
                }
            }
        }
    }
    post {
        success {
            echo 'Cloud Config desplegado correctamente en stage.'
        }
        failure {
            echo 'Pipeline de Cloud Config (stage) fall√≥.'
        }
        always {
            echo 'Pipeline completado.'
        }
    }
}
